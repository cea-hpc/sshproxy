sshproxy.yaml(5)
================
:doctype:	manpage
:man source:	sshproxy
:man manual:	sshproxy manual
:man version:	{sshproxy_version}

NAME
----
sshproxy.yaml - sshproxy configuration file

SYNOPSIS
--------
*/etc/sshproxy/sshproxy.yaml*

DESCRIPTION
-----------

*sshproxy*(8) reads its configuration from '/etc/sshproxy/sshproxy.yaml'. You
can specify another configuration as its first argument.

The configuration is in the YAML format.

The following keys can be defined:

*debug*::
	a boolean ('true' or 'false') to enable debug messages in the logs
	('false' by default).

*log*::
	a string which can be:
	- empty ('""') to display the logs on the standard output. It is the
	  default.
	- 'syslog' to save logs messages through the *syslog*(3).
	- a path to a filename. The directory must exist. The pattern '\{user}'
	  in the path will be replaced with the user login (eg.
	  '/var/log/sshproxy/\{user}.log'). The user is the owner of the
	  filename, so he needs the right to write in the specified directory.

*check_interval*::
	a string specifying the minimal interval for checking if an host is
	alive.  It is empty by default (i.e. always check host). The string
	can contain a unit suffix such as 'h', 'm' and 's' (e.g. '2m30s').

*error_banner*::
	a string displayed to the client when no backend can be reached (more
	precisely, when all backends are either down or disabled in etcd).
	This message can be multiline. It is empty by default.

*blocking_command*::
	A string specifying a command which will be launched before the
	bg_command and before connecting to the destination. The standard and
	error outputs are displayed to the user. If the return code of the
	blocking command is not 0, sshproxy will abort the session. It is
	empty by default.

*bg_command*::
	a string specifying a command which will be launched in the background
	for the session duration. Its standard and error outputs are only
	logged in debug mode. It is empty by default.

*dump*::
	a string specifying the path to save raw dumps for each user session.
	Empty by default. The path can (and should) contain one or more of the
	following patterns:
	'\{user}'::: replaced by the user login
	'\{sid}'::: replaced by the unique session id
	'\{time}'::: replaced by the connection starting time (e.g.
	  "2006-01-02T15:04:05.999999999Z07:00").

The subdirectories will be created if needed with the user as owner. So the
user needs to have the right to write in this directory. For example:
'/var/spool/sshproxy/\{user}/\{time}-\{sid}.dump'

It can also be "etcd", in order to store stats into etcd.

It can also be a network address where to send dumps if specified as
'TCP:host:port' (the TCP is case sensitive), e.g.  'TCP:collector:5555'.

*dump_limit_size*::
	an integer specifying the maximum amount of bytes of a dump. Setting
	the 'dump_limit_window' option will limit the amount of bytes per
	window. This option is only useful if the 'dump' option is set to a
	file or to a network address. Defaults to 0 (no limit).

*dump_limit_window*::
	a string specifying the duration of a dump measurement window. "0" by
	default, the string can contain a unit suffix such as 'h', 'm' and 's'
	(e.g. "2m30s"). When set to "0", a dump will stop once it's too big
	(and the dump's file descriptor will be closed. When set to a
	duration, the dump will pause when there is too much data transferred
	in the current window (or the previous), and will resume when few
	enough data are transferred during the previous window and the current
	one. This option is only useful when the 'dump_limit_size' option is
	set.

*log_stats_interval*::
	a string specifying the interval at which basic statistics of
	transferred bytes are logged. 0 by default (i.e. disabled). The string
	can contain a unit suffix such as 'h', 'm' and 's' (e.g. '2m30s').
	These statistics are only available when the 'dump' option is set.

*etcd_stats_interval*::
	a string specifying the interval at which bandwidth is updated in
	etcd. 0 by default (i.e. disabled). The string can contain a unit
	suffix such as 'h', 'm' and 's' (e.g. '2m30s'). These statistics are
	only available when the 'dump' option is set.

*max_connections_per_user*::
	an integer setting the maximum number of connections allowed per user.
	Connections are counted in the etcd database. If set to 0, there is no
	limit number of connections per user. Default is 0.

Commands can be translated between what is received by sshproxy and what is
executed by the ssh forked by sshproxy. *translate_commands* is an associative
array whose keys are strings containing the exact user command.  *ssh_args*
contains an optional list of options that will be passed to ssh. *command* is
a mandatory string, the actual executed command.  *disable_dump* is false by
default. If true, no dumps will be done for this command.

For example, we can have the following:

	translate_commands:
	    "internal-sftp":
	        ssh_args:
	            - "-oForwardX11=no"
	            - "-oForwardAgent=no"
	            - "-oPermitLocalCommand=no"
	            - "-oClearAllForwardings=yes"
	            - "-oProtocol=2"
	            - "-s"
	        command: "sftp"
	        disable_dump: true

An associative array *ssh* specifies the SSH options:

*exe*::
	path or command to use for the SSH client ('ssh' by default).

*args*::
	a list of arguments for the SSH client. Its default value is: '["-q",
	"-Y"]'.

etcd configuration is provided in an associative array *etcd* whose keys are:

*endpoints*::
	a list of etcd endpoints. Default is determined by the underlying library.

*tls*::
	an associative array to configure TLS if enabled on etcd endpoints.
	The keys are *cafile*, *keyfile* and *certfile*. Default is no TLS.

*username*::
	a string with a username if basic authentication is enabled.

*password*::
	a string with a password if basic authentication is enabled.

*keyttl*::
	an integer specifying the lifetime in seconds of a connection
	information in etcd. The key will be kept alive while the connection
	is up. It will be removed from etcd after this number of seconds.
	Default is 5 seconds.

*mandatory*::
	a boolean. If true, connections will be allowed only if etcd is
	available.  Default is false.

For example, we can have the following:

	etcd:
	    endpoints:
	        - "https://127.0.0.1:2379"
	    tls:
	        cafile: "/etc/sshproxy/ca.pem"
	        keyfile: "/etc/sshproxy/sshproxy.key"
	        certfile: "/etc/sshproxy/sshproxy.pem"
	    username: "sshproxy"
	    password: "sshproxypassword"
	    mandatory: true

An associative array *environment* can be used to set environment variables.
The pattern '\{user}' will be replaced with the user login:

	environment:
	    XAUTHORITY: /tmp/.Xauthority_{user}

*service*::
	a string. Used for display. It's also used as a key in order to check
	in etcd if a user already has active connections. Defaults to
	'default'.

*dest*::
	an array of destination hosts (with an optional port). Each host can
	be a nodeset (eg. "host[5-6]"). If libnodeset.so is available,
	clustershell groups can also be used (eg. "@hosts").

	dest: [host5:4222]

*route_select*::
	a string. Defines how the host destination will be chosen. It can be
	'ordered' (the default), 'random', 'connections' or 'bandwidth'. If
	'ordered', the hosts are tried in the order listed until a successful
	connection is made.  The list is first randomly sorted if 'random' is
	specified (i.e. a poor-man load-balancing algorithm).  If
	'connections', the hosts with less connections from the user have
	priority, then the hosts with less global connections, and in case of
	a draw, the selection is random. For 'bandwidth', it's the same as
	'connections', but based on the bandwidth used, with a rollback on
	connections (which is frequent for new simultaneous connections).

*mode*::
	a string. Defines the stickiness of a connection. It can be 'sticky'
	or 'balanced' (defaults to 'sticky'). If 'sticky', then all
	connections of a user will be made on the same destination host. If
	'balanced', the route_select algorithm will be used for every
	connection.

*force_command*::
	a string. Can be set to override the command asked by the user.

*command_must_match*::
	a boolean. If set to 'true', then the connection is closed if the
	original command is not the same as the force_command. Defaults to
	'false'.

*etcd_keyttl*::
	an integer. Defaults to 0. If a value is set (in seconds), the chosen
	backend will be remembered for this amount of time.

Each of the previous parameters can be overridden for specific sources (IP
address or DNS name of the listening SSH daemon, with an optional port), for
specific users or groups thanks to the *overrides* associative array.

For example if we want to save debug messages for the 'foo' group we define:

	overrides:
	    - match:
	        - groups: [foo]
	      debug: true

It is possible to override the same options for multiple groups and users.

For example, if we want to save debug messages if the user is 'alice' or if
its groups contain 'foo' or 'bar' groups we define:

	overrides:
	    - match:
	        - users: [alice]
	        - groups: [foo, bar]
	      debug: true

Any key can be defined (in this example, the keys are overriden if the user is
'alice' AND if the source is '192.168.0.1:22'):

	overrides:
	    - match:
	        - users: [alice]
	          sources: [192.168.0.1:22]
	      service: default
	      dest: [hostx]
	      ssh:
	          args: ["-vvv", "-Y"]

If a user belongs to several groups and these groups are defined in the
configuration file, each setting can be overridden by the next group.

For example, if a user is in the 'admin' and 'users' groups the logs will be
in '/var/log/sshproxy/admin/\{user}.log' with the following configuration:

	overrides:
	    - match:
	        - groups: [users]
	      log: /var/log/sshproxy/users/{user}.log
	    - match:
	        - groups: [admin]
	      log: /var/log/sshproxy/admin/{user}.log

Each element of the *match* array is treated as an "or" statement. If an
element of the *match* array contains multiple keys, they are treated as an
"and" statement.

In the following example: 'alice', 'bob' and any user in the group 'foo' will
have the 'debug' set to true. But if any of those are also in the groups 'bar'
AND 'baz', 'debug' will be set to false, as the last override takes
precedence.

EXAMPLE
-------

------------------------------------------------------------------------------
---
debug: false

log: syslog

stats_interval: 5m

bg_command: krenew -K 60

environment:
    XAUTHORITY: /tmp/.Xauthority_{user}

ssh:
    args: ["-q", "-Y", "-enone"]

service: default
dest: [login1, login2]
route_select: random

overrides:
    - match:
        - users: [alice, bob]
        - groups: [foo]
      service: default
      dest: [login0]
      debug: true
      dump: /var/spool/sshproxy/{user}-{time}-{sid}.dump
    - match:
        - groups: [bar]
          groups: [baz]
      debug: false
------------------------------------------------------------------------------

FILES
-----
/etc/sshproxy/sshproxy.yaml::
	Contains configuration for *sshproxy*(8).

SEE ALSO
--------
*sshproxy*(8)

AUTHORS
-------
sshproxy was written by Arnaud Guignard <arnaud.guignard@cea.fr> and Cyril
Servant <cyril.servant@cea.fr>.

COPYING
-------
Copyright (C) 2015-2025 CEA/DAM/DIF. Free use of this software is granted
under the term of the CeCILL-B license.

// vim:tw=78:ft=asciidoc:

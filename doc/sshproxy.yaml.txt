sshproxy.yaml(5)
================
:doctype:	manpage
:man source:	sshproxy
:man manual:	sshproxy manual
:man version:	{sshproxy_version}

NAME
----
sshproxy.yaml - sshproxy configuration file

SYNOPSIS
--------
*/etc/sshproxy/sshproxy.yaml*

DESCRIPTION
-----------

*sshproxy*(8) reads its configuration from '/etc/sshproxy/sshproxy.yaml'. You
can specify another configuration as its first argument.

The configuration is in the YAML format.

The following keys can be defined:

*debug*::
	a boolean ('true' or 'false') to enable debug messages in the logs
	('false' by default).

*log*::
	a string which can be:
	- empty ('""') to display the logs on the standard output. It is the
	  default.
	- 'syslog' to save logs messages through the *syslog*(3).
	- a path to a filename. The directory must exist. The pattern '\{user}'
	  in the path will be replaced with the user login (eg.
	  '/var/log/sshproxy/\{user}.log'). The user is the owner of the
	  filename, so he needs the right to write in the specified directory.

*check_interval*::
	a string specifying the minimal interval for checking if an host is
	alive.  It is empty by default (i.e. always check host). The string
	can contain a unit suffix such as 'h', 'm' and 's' (e.g. '2m30s').

*bg_command*::
	a string specifying a command which will be launched in the background
	for the session duration. Its standard and error outputs are only
	logged in debug mode. It is empty by default.

*dump*::
	a string specifying the path to save raw dumps for each user session.
	Empty by default. The path can (and should) contain one or more of the
	following patterns:
	'\{user}'::: replaced by the user login
	'\{sid}'::: replaced by the unique session id
	'\{time}'::: replaced by the connection starting time (e.g.
	  "2006-01-02T15:04:05.999999999Z07:00").

The subdirectories will be created if needed with the user as owner. So the
user needs to have the right to write in this directory. For example:
'/var/spool/sshproxy/\{user}/\{time}-\{sid}.dump'

It can also be a network address where to send dumps if specified as
'TCP:host:port' (the TCP is case sensitive), e.g.  'TCP:collector:5555'.

*log_stats_interval*::
	a string specifying the interval at which basic statistics of
	transferred bytes are logged. 0 by default. The string can contain a
	unit suffix such as 'h', 'm' and 's' (e.g. '2m30s'). These statistics
	are only available when the 'dump' option is set.

*etcd_stats_interval*::
	a string specifying the interval at which bandwidth is updated in
	etcd. 0 by default. The string can contain a unit suffix such as 'h',
	'm' and 's' (e.g. '2m30s'). These statistics are only available when
	the 'dump' option is set.

etcd configuration is provided in an associative array *etcd* whose keys are:

*endpoints*::
	a list of etcd endpoints. Default is determined by the underlying library.

*tls*::
	an associative arrary to configure TLS if enabled on etcd endpoints.
	The keys are *cafile*, *keyfile* and *certfile*. Default is no TLS.

*username*::
	a string with a username if basic authentication is enabled.

*password*::
	a string with a password if basic authentication is enabled.

*keyttl*::
	an integer specifying the lifetime in seconds of a connection
	information in etcd. The key will be kept alive while the connection
	is up. It will be removed from etcd after this number of seconds.
	Default is 5 seconds.

For example, we can have the following:

	etcd:
	    endpoints:
	        - "https://127.0.0.1:2379"
	    tls:
	        cafile: "/etc/sshproxy/ca.pem"
	        keyfile: "/etc/sshproxy/sshproxy.key"
	        certfile: "/etc/sshproxy/sshproxy.pem"
	    username: "sshproxy"
	    password: "sshproxypassword"

An associative array *environment* can be used to set environment variables.
The pattern '\{user}' will be replaced with the user login:

	environment:
	    XAUTHORITY: /tmp/.Xauthority_{user}

An associative array *routes* defines the destination according to the
listening IP address of the SSH daemon:

	routes:
	    service1:
	        source: ["192.168.0.1"]
	        dest: [host1, host2]
	    service2:
	        source: ["192.168.0.2"]
	        dest: [host3, host4]
	        route_select: bandwidth
	        mode: balanced
	    default:
	        dest: ["host5:4222"]

The key is the service name (only used for display). The special service name
'default' can be used to define a default route and does not need the source
key. The source value is the IP address or DNS name of the listening SSH
daemon (with an optional port). The dest value is an array of destination
hosts (with an optional port). The route_select value difines how the host
destination will be chosen. It can be 'ordered' (the default), 'random',
'connections' or 'bandwidth'. If 'ordered', the hosts are tried in the order
listed until a successful connection is made. The list is first randomly
sorted if 'random' is specified (i.e. a poor-man load-balancing algorithm).
If 'connections', the hosts with less connections from the user have
priority, then the hosts with less global connections, and in case of a draw,
the selection is random. For 'bandwidth', it's the same as 'connections', but
based on the bandwidth used, with a rollback on connections (which is
frequent for new simultaneous connections). Finally, the mode value defines
the stickiness of a connection. It can be 'sticky' or 'balanced'. If
'sticky', then all connections of a user will be made on the same destination
host. If 'balanced', the route_select algorithm will be used for every
connections.

In the previous example, a client connected to '192.168.0.1' will be proxied
to 'host1' and, if the host is not reachable, to 'host2'. If a client does not
connect to '192.168.0.1' or '192.168.0.2' it will be proxied to the sshd
daemon listening on port 4222 on 'host5'.

An associative array *ssh* specifies the SSH options:

*exe*::
	path or command to use for the SSH client ('ssh' by default).

*args*::
	a list of arguments for the SSH client. Its default value is: '["-q",
	"-Y"]'.

Each of the previous parameters can be overridden for a group thanks to the
*groups* associative array.

For example if we want to save debug messages for the 'foo' group we define:

	groups:
	    foo:
	        debug: true

Routes, environment or SSH options can also be defined:

	groups:
	    foo:
	        routes:
	            default:
	                dest: [hostx]
	
	        ssh:
	            args: ["-vvv", "-Y"]

The routes are fully overridden and not merged with previous defined ones.

If a user belongs to several groups and these groups are defined in the
configuration file, each setting can be overridden by the next group.

For example, if a user is in the 'admin' and 'users' groups the logs will be
in '/var/log/sshproxy/admin/\{user}.log' with the following configuration:

	groups:
	    users:
	        log: /var/log/sshproxy/users/{user}.log
	
	    admin:
	        log: /var/log/sshproxy/admin/{user}.log

We can also override the parameters for a specific user with the 'users'
associative array.

For example if we want to save debug messages for the 'foo' user we
define:

	users:
	    foo:
	        debug: true

As for the groups, we can modify routes, environment or SSH options:

	users:
	    foo:
	        ssh:
	            args: ["-vvv", "-Y"]

The parameters defined for a user are the last applied and therefore always
override the settings defined by in the 'groups' associative array.

EXAMPLE
-------

------------------------------------------------------------------------------
---
debug: false

log: syslog

stats_interval: 5m

bg_command: krenew -K 60

environment:
    XAUTHORITY: /tmp/.Xauthority_{user}

ssh:
    args: ["-q", "-Y", "-enone"]

routes:
    default:
        dest: [login1, login2]
        route_select: random

groups:
    admin:
        routes:
            default:
                dest: [login0]

users:
    user1234:
        debug: true
        dump: /var/spool/sshproxy/{user}-{time}-{sid}.dump
------------------------------------------------------------------------------

FILES
-----
/etc/sshproxy/sshproxy.yaml::
	Contains configuration for *sshproxy*(8).

SEE ALSO
--------
*sshproxy*(8)

AUTHORS
-------
sshproxy was written by Arnaud Guignard <arnaud.guignard@cea.fr>.

COPYING
-------
Copyright (C) 2015-2020 CEA/DAM/DIF. Free use of this software is granted
under the term of the CeCILL-B license.

// vim:tw=78:ft=asciidoc:
